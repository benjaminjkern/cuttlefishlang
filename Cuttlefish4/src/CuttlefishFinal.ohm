Cuttlefish {
    Program = newline? ListOf<Statement, newline> newline?

    Statement =
        | Assignment
        | Reassignment
        | Print
        | If
        | Switch
        | Catch
        | While
        | Repeat
        | For
        | Break
        | Continue
        | Return
        | Put
        
    Assignment =
        | Assignable "=" Expression -- single
        | NonemptyListOf<Assignable, ","> "=" NonemptyListOf<~Function ~Process Expression, ","> -- multiple
    Reassignment =
        | Assignable reassignable ~space "=" Expression
    Print = print Expression
    If = if StmtExp ":" Block<Statement> (newline else ":"? Block<Statement>)?
    Switch = switch StmtExp ":" PatternBlock
    Catch = catch ":"? PatternBlock
    For = for StmtExp ":" PatternBlock
    While = while StmtExp ":" Block<Statement>
    Repeat = repeat (StmtExp? ":")? Block<Statement>
    Break = break
    Continue = continue
    Return = return Expression?
    Put = put? Expression
    
   	keyword = print | if | else | catch | while | repeat | for | break | continue | return | put | fn | prc | switch | opWord
    print = "print" &sep
    if = "if" &sep
    else = "else" &sep
    switch = "switch" &sep
    catch = "catch" &sep
    for = "for" &sep
    while = "while" &sep
    repeat = "repeat" &sep
    break = "break" &sep
    continue = "continue" &sep
    return = "return" &sep
    put = "put" &sep
    fn = "fn"
    prc = "prc"
    sep = space | reserved | &end | newline | ":"

    Assignable = ElementOf | ref // | string

    Expression =  (opWord | ExpBit) ExpBit* Block<Expression>?
    ExpBit = Atom | #(special)
    
    StmtExp = (opWord | ExpBit) (~":" Atom | #(~":" special))*

    Atom =
        | "(" Expression ")" -- group
        | List
        | DiscreteRange
        | ContinuousRange
        | Tuple
        | Set
        | Function
        | Process
        | String
        | number
        | ref

    // consider getting these from outside scope
    opWord = ("in" | "and" | "or") &sep
    op = "===" | "!==" | "==" | "!=" | ">=" | "<=" | ">" | "<" | "%=" | "||" | "&&" | "|>" | "!" | "?" | ":" | reassignable
    reassignable = "*" | "//" | "/"  | "^" | "++" | "+" | "-" | "%" | "|" | "&"

    special =
    	| space opWord -- explicitsep
    	| &sep opWord -- implicitsep
    	| &sep space? ~reserved op -- sepop
    	| ~reserved op -- last

    reserved = "->" | "=" ~"=" | "." | "," | "(" | ")" | "{" | "}" | "[" | "]" | ".." | "→" | "←" | ";" | "\"" | "'" | "`"
    ref = ~number ~keyword (~reserved ~special ~space ~newline any)+
    
    DiscreteRange = ("[" | "(") Expression ".." (Expression "..")? Expression? (")" | "]")
    ContinuousRange = ("[" | "(") Expression "..." Expression? (")" | "]")

    ElementOf = Expression #(~space) "." #(~space) ref

    Tuple = "(" ListOf<Expression, ","> ","? ")"
    List = "[" ListOf<Expression, ","> ","? "]"
    Set = "{" ListOf<Expression, ","> ","? "}"
    // MatchSet = "{" Block<PatternElem Guard?> "}"
    // need to put this in at some point but this requires breaking down guards and patterns

    Function = fn ":" PatternBlock
    Process = prc ":" PatternBlock

    PatternBlock =
        | Block<Pattern> -- pattern
        | Block<Statement> -- statement
    Pattern =
        | NonemptyListOf<PatternElem, ","> Block<Guard> -- guard
        | NonemptyListOf<PatternElem, ","> Returnbit -- return
    Guard =
        | "|" Expression Block<Guard> -- guard
        | "|" Expression? Returnbit -- return
    Returnbit = "->" Block<~Pattern Statement>

    PatternElem = TypeMatch ("=" Expression)? -- anonymous
        | ~ref Atom -- specific
    patternModifier = "*" | "?" | "+"
    TypeMatch =
        | Atom (#(~space) patternModifier)? ref -- typed
        | ref -- untyped

    Block<Inside> = NonemptyListOf<Inside, ";"> -- single
    	| newline "→" newline ListOf<Inside, newline> newline "←" -- indented
    	| indentnewline? "{" indentnewline? ListOf<Inside, newline> indentnewline? "}" -- forced
    indentnewline =
        | newline ("→"|"←") newline -- indented
        | newline
    String = string<"'"> | string<"\"">
    	| "`" ListOf<#(stringbit), StringExp> "`" -- expression

    stringbit = ("\\`" | "\\{" | ~"`" ~"{" any)*
    StringExp = "{" Expression "}"
    
    number = "-"? digit+ ("." digit+)? (("e" | "E") ("-" | "+")? digit+)?
    string<delim> = delim (escape<delim> | ~delim any)* delim
    escape<delim> = "\\" delim
    comment = "###" (~"###" any)* ("###"|&end) | "#" (~newline any)* (&newline|&end)
    newline = ("\n" | "\r" | ";") (space* ("\n" | "\r" | ";"))*
    space := ~newline ("\u0000".." "  | comment)
}