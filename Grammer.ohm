Cuttlefish {
    CurrentlyDefined = Comment | Macro | SubRoutineGroup | StandaloneFunction | Expression | Atom
    
    Specification = NonemptyListOf<SubRoutineGroup,space>
    
    Comment = 
    | rawSequence<"#/","/#">
    | rawSequence<("#" ~"!" ),("\n"| end)>
    Macro = rawSequence<"#!",("\n"| end)>
   	
    SubRoutineGroup = FunctionGroup | ProcessGroup | Server
    
    FunctionGroup = "fn" ":" "\n" NonemptyListOf<SubRoutine,"\n"+>
    StandaloneFunction = "fn" ":" SubRoutine ("\n"| end | ";")
    ProcessGroup = "prc" ":"  "\n" NonemptyListOf<SubRoutine,"\n"+>
    Server = "srv" ":"  "\n" NonemptyListOf<SubRoutine,"\n"+>
    
    Expression = 
    | PatternMatch 
    | ValueExpression
    | ReturnExpression
    | ProcessLinkExpression
    
    PatternMatch = Pattern "=" ValueExpression
 	ReturnExpression = "put" ValueExpression
    ProcessLinkExpression = "self" "++" ValueExpression
    
    ValueExpression =
    | NonemptyListOf<ValueExpression,"*">
    |  (~("\n" | end | "*") Atom)+
    | SubRoutine
    
    SubRoutine = Pattern "->" NonemptyListOf<Expression,"\n">
    
    Tuple = "(" (Atom "," )+  (  "" ")"  |  ( Atom  ")"  ) )
    List = Sequence<"[","]">
    String = rawSequence<"\"","\"">
    | rawSequence<"\'","\'"> 
    
    Atom =
    | List
    | String
    | Comment
    | Tuple
    | numlit 
    | id 
    | nospaceops 
    | "()"
    | "(" Atom ")" --singleton
	
    nospaceops = dynamicnospaceops | "~" | "+" 
    reserved = "*" | ":"
    numlit = digit+
    id = (~space ~nospaceops ~reserved any)+
    Pattern = Atom
    Type = id | List | Tuple | DynamicSequence

    dynamicnospaceops = "FOR COMPILE TIME USE"
    DynamicRawSequence = "FOR COMPILE TIME USE"
    DynamicSequence = "FOR COMPILE TIME USE"
   
    Binding<x,y> = x "=" y
    Sequence<open,close> = open Atom ("," Atom)*  close
    rawSequence<open,close> = open (~open ~close any)*  close

    

}

