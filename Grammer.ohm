Cuttlefish {
    Script = (Macro &#"\n")* NonemptyListOf<Line, &#"\n">
    
    Line = Statement Comment --full
    | Comment
    | Statement
    
    Statement = 
    | PatternMatchStatement
    | ReturnStatement
    | PrintStatement
    | ProcessLinkStatement
    
    Comment = 
    | rawSequence<"#/","/#">
    | rawSequence<("#" ~"!"),(&#"\n"| end)>
    Macro = rawSequence<"#!",(&#"\n"| end)>
    
    Function = "fn" ":" SubRoutineGroup --fullform
    | "fn" ":" Expression --dollarFunction
    Process = "prc" ":" SubRoutineGroup
    Server = "srv" ":"  SubRoutineGroup
    
    PatternMatchStatement =
    | Pattern "=" Expression --valueBind
    | Pattern ":=" SubRoutineGroup --functionBind
 	ReturnStatement = "put"? Expression
    PrintStatement = "print" Expression
    ProcessLinkStatement = "self" "++" Expression
    
    Expression = (~(#"\n") ValueExpression)+
    | ValueExpression #nospaceops Expression --nospaceop
    ValueExpression = Routine
    | Select
    | Atom
   	
    Routine = Function | Process | Server
    SubRoutineGroup = (~SubRoutine Line)+ ";"? --smallForm
    | SubRoutine+
    SubRoutine = Pattern "->" (~SubRoutine Line)+ ";"?
    
    Tuple = "(" (Atom "," )+  (  "" ")"  |  ( Atom  ")"  ) )
    List = "[" Atom ".." Atom? "]" --intlist
    | Sequence<"[","]">
    String = rawSequence<"\"","\"">
    | rawSequence<"\'","\'">
    | rawSequence<"`","`">
    
    Atom = List
    | String
    | Tuple
    | numlit 
    | id 
    | nospaceops 
    | "()"
    | "(" Expression+ ")" --singleton
    
    Select = (List | Tuple | String | DynamicSequence | id) "[" (Function | numlit) "]"
	
    nospaceops = dynamicnospaceops | "~" |  "++" | ">=" | "<=" | "!=" | "==" | "===" | "*"
    reserved = "(" | ")" | "," | "[" | "]" | "->" | "=>" | ":" | ":=" | "fn" | "put" | "print" | "=" | ".." | "#" | ";"
    numlit = digit+
    id = (~space ~nospaceops ~reserved any)+
    Pattern = NonemptyListOf<PatternElement,",">
    PatternTuple = "(" ListOf<PatternElement,","> ")"
    PatternElement = PatternTuple --patternTuple
    | ListType? ~#"\n" ListPattern --patternList
    | Type ~#"\n" Atom --type
    | Atom
    Type = Type "=>" Type --function
    | ListType
    | id
    ListType = "[" Type "]"
    ListPattern = Atom ":" id

    dynamicnospaceops = "FOR COMPILE TIME USE"
    DynamicRawSequence = "FOR COMPILE TIME USE"
    DynamicSequence = "FOR COMPILE TIME USE"
   
    Binding<x,y> = x "=" y
    Sequence<open,close> = open ListOf<Atom,","> close
    rawSequence<open,close> = open (~open ~close any)*  close
}