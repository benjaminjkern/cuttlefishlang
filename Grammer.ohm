Cuttlefish {
    CurrentlyDefined = Macro | Expression+ | Atom
    
    Specification = NonemptyListOf<SubRoutineGroup,space>
    
    Comment = 
    | rawSequence<"#/","/#">
    | rawSequence<("#" ~"!"),(&"\n"| end)>
    Macro = rawSequence<"#!",(&"\n"| end)>
   	
    SubRoutineGroup = Function | ProcessGroup | Server
    
    Function = "fn" ":" SubRoutine+ --fullform
    | "fn" ":" ValueExpression --dollarFunction
    ProcessGroup = "prc" ":" SubRoutine+
    Server = "srv" ":"  SubRoutine+
    
    Expression = 
    | PatternMatch 
    | ReturnExpression
    | ProcessLinkExpression
    | ValueExpression

    
    PatternMatch = 
    | Binding<id,SubRoutineGroup> --subroutineGroup
    | Pattern "=" ValueExpression --valueBind
    | Pattern ":=" SubRoutine+ --functionBind
    | Pattern ":=" ValueExpression --dollarFunction
 	ReturnExpression = "put" ValueExpression
    ProcessLinkExpression = "self" "++" ValueExpression
    
    ValueExpression = NonemptyListOf<ValueExpression,"*">
    |  ( ~#("\n" | end | "*") Atom)+
    
    SubRoutine = Pattern "->" (~SubRoutine Expression)+
    
    Tuple = "(" (Atom "," )+  (  "" ")"  |  ( Atom  ")"  ) )
    List = Sequence<"[","]">
    String = rawSequence<"\"","\"">
    | rawSequence<"\'","\'"> 
    
    Atom = SubRoutineGroup
    | Select
    | List
    | String
    | Comment
    | Tuple
    | numlit 
    | id 
    | nospaceops 
    | "()"
    | "(" Atom+ ")" --singleton
    
    Select = (List | Tuple | String | DynamicSequence | id) "[" (Function | numlit) "]"
	
    nospaceops = dynamicnospaceops | "~" |  "++" | "+"
    reserved = "*" | "(" | ")" | "," | "[" | "]" | "->" | ":"
    numlit = digit+
    id = (~space ~nospaceops ~reserved any)+
    Pattern = NonemptyListOf<PatternElement,",">
    PatternTuple = "(" ListOf<PatternElement,","> ")"
    PatternElement = PatternTuple --patternTuple
    | ListType ListPattern --patternList
    | Type Atom --type
    | Atom
    Type = Type "=>" Type --function
    | ListType
    | id
    ListType = "[" Type "]"
    ListPattern = Atom ":" id

    dynamicnospaceops = "FOR COMPILE TIME USE"
    DynamicRawSequence = "FOR COMPILE TIME USE"
    DynamicSequence = "FOR COMPILE TIME USE"
   
    Binding<x,y> = x "=" y
    Sequence<open,close> = open ListOf<Atom,","> close
    rawSequence<open,close> = open (~open ~close any)*  close
    
    
}