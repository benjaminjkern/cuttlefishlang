Cuttlefish {
   Specification = newline? Statement (newline Statement)* newline?

   Statement =
    | Pattern "=" Expression -- assignment
    | print Expression -- print
    | put? Expression -- put

   Block<A, delimiter> =
    | newline indent newline? A (delimiter? newline A)* delimiter? newline? dedent &newline? -- large
    | NonemptyListOf<A, delimiter> delimiter? &newline? -- small

   Pattern = NonemptyListOf<PatternElement,",">
   PatternElement =
    | "(" Pattern ")" -- tuple
    | ListType? Atom ":" id -- list
    | Type PatternElement -- typed
    | Atom
   Type = Type "=>" Type -- function
    | "(" Block<Type, ","> ")" -- tuple
    | ListType -- list
    | id
   ListType = "[" Type "]"

   SubRoutineGroup =
    | Block<SubRoutine, ";">
    | Block<Statement, ","> -- singular

   Routine = Function | Process | Server
   Function = fn ":" SubRoutineGroup
   Process = prc ":" SubRoutineGroup
   Server = srv ":" SubRoutineGroup

   SubRoutine = Pattern ("|" Expression)? "->" Block<Statement, ",">

   Expression = Atom+

   Atom =
    | AbstractType
    | Routine
    | Select
    | List
    | String
    | "(" Expression ")" -- singleton
    | Tuple
    | numlit
    | nospaceops
    | id

   AbstractType = Type "type" (":" Block<DataPattern, ";">)?
   DataPattern = (Pattern "->")? Block<Pattern, ",">

   Select = (List | Tuple | String | DynamicSequence | id) Selector
   Selector = "[" (Function | numlit | id) "]" -- nonSlice
    | List

   Tuple =
    | "(" Block<Expression,","> ")" -- nonempty
    | "(" ")" -- empty
   List =
    | "[" Block<Expression,","> "]" -- nonempty
    | "[" index ".." (index "..")? index? "]" -- num
    | "[" "]" -- empty
   index = numlit | id

   String = rawSequence<"\"","\"">
    | rawSequence<"\'","\'">
    | "`" stringbit ("{" Expression "}" stringbit)* "`" -- interpolated
   stringbit = (~"{" ~"`" any)*

   numlit = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?

   print = "print" ~alnum
   put = "put" ~alnum
   fn = "fn" ~alnum
   prc = "prc" ~alnum
   srv = "srv" ~alnum

   indent = "⇨"
   dedent = "⇦"

   nospaceops = dynamicnospaceops | ">=" | "<=" | "!=" | "==" | "==="
   keyword = fn | prc | srv | print | put
   reserved = keyword | nospaceops | "(" | ")" | "," | "[" | "]" | "->" | "=>" | ":" | ":=" | "=" | "." | "#" | ";" | "\n" | "|" | indent | dedent
   id = (~reserved ~space any)+

   dynamicnospaceops = "FOR COMPILE TIME USE"
   DynamicRawSequence = "FOR COMPILE TIME USE"
   DynamicSequence = "FOR COMPILE TIME USE"

   newline =  ("\r"? "\n" comment?)+
   space :=  " " | "\t" | comment
   comment =
    | "#" ~"/" (~"\n" any)* -- normal
    | rawSequence<"#/","/#">

   Sequence<open,close> = open ListOf<Atom,","> close
   rawSequence<open,close> = open (~open ~close any)* close
}
